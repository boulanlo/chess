#+Title: Available captures for the rook; a performance analysis on a parallelized version of the problem
#+Author: Louis Boulanger

* Foreword
This document has been generated from an =org-mode= file. The source can
be found here ([[./report.org][Source]]), and a PDF version here ([[./report.pdf][PDF]]). I aimed to have
both the GitHub-ready org-mode file and the PDF to be readable, but
unfortunately, GitHub doesn't support mathematical expressions to be
rendered natively on the preview; so, in order to view correctly the
mathematical formulas throughout the analysis, I recommend reading the
PDF version.

* Introduction
#+Begin_src python :session :results none :exports none
import chess
import chess.svg
import sys
from cairosvg import svg2png

def draw_board(name, fen, attacks="a1"):
    board = chess.Board(fen)
    squares = board.attacks(chess.parse_square(attacks))
    svg = chess.svg.board(board=board, squares=squares)
    svg2png(bytestring=svg, output_width="300px", write_to="img/{}.png".format(name))
#+End_src


This project aims to implement a solution for the problem of the
number of available captures for the rook on a chessboard: on a
chessboard, where pieces are either *a black rook*, *black bishops* or
*white pawns*, how many pawns can the rook capture? 

#+Begin_src python :session :results output graphics file :file example1.png :output-dir img/ :exports results
draw_board("example1", "4P3/5P2/2P1r3/6P1/4b3/4P3/8/8 w - - 0 1", attacks="e6")
#+End_src

#+RESULTS:
[[file:img/example1.png]]

In this example, the rook can only capture 2 pawns: e8 and c6. The
pawn on e3 is blocked by the bishop on e4.

* Base algorithm
The base algorithm is quite simple: given a board and the position of
the rook, we need to iterate on the squares in the 4 directions: if
the first piece encountered is a bishop, there is no capture on this
position; and if it's a pawn, there is a capture. The result is the
sum of the number of captures.

#+Include: "src/board.rs" src rust :lines "172-205"

* First attempt at parallelization using Rayon
We can attempt to parallelize the algorithm in a straightforward
manner, by looking at the 4 different directions in parallel. This
version of the algorithm is quite similar to the sequential one: using
Rayon's powerful parallel iterators, we can simply iterate in parallel
on the directions.

#+Include: "src/board.rs" src rust :lines "238-264"

** Theoretical performance analysis of the parallel version
Let's analyze the parallel algorithm. We first formally define a board
as a 2-dimensional space of size $N^2$. There are 4 parallel branches,
each iterating on successive squares of the board. Deciding on the
capture is $\mathcal{O}(1)$, so the exploration of a line takes
$\mathcal{O}(N)$ at most.

We then have a work of $W = \mathcal{O}(4N)$, and a depth of
$D = \mathcal{O}(N)$. It is obvious here that having more than 4
processors for the task is going to be detrimental for the
performances.

* Adding more rooks
The previous example isn't really scaleable: since we can only
consider 4 directions at once, the parallel algorithm can only be at
most 4 times more efficient than the sequential one. Let's consider
the case where there is more than one rook on the board, and we need
to count the total number of captures for all rooks. When two rooks
can capture the same pawn, the capture is only counted once: we want
the number of pawns that can be captured.

#+Begin_src python :session :results output graphics file :file example2.png :output-dir img/ :exports results
draw_board("example2", "1b6/4Pr1P/8/1r3P2/8/4r1bP/2b5/4P2b w - - 0 1")
#+End_src

#+RESULTS:
[[file:img/example2.png]]

In this example, we have three rooks:
- *f7* can capture the pawns /e7/, /f5/ and /h7/: *3* captures.
- *b5* can capture the pawn /f5/, but since it has already been counted
  previously, it is not counted here. *3* captures.
- *e3* can capture /e7/ (but already counted) and /e1/: *4* captures
In total, there are 4 pawns that can be captured out of the 5 on the
board: the pawn on /h3/ is blocked by the nearby bishop.

** Sequential algorithm
We already designed the algorithm for the case with only one rook
previously: since the problem only changes the number of rooks on the
board, we can re-use the previous algorithm, and apply it to each rook
on the board. Let's look at the sequential version first.

#+Include: "src/board.rs" src rust :lines "206-237"

The code is the same as the previous one, only that we apply it to all
rooks on the board. In order to take duplicate captures into
consideration, we collect the capture's position and not its presence;
then, we aggregate these positions into a `HashSet`. This way,
duplicates are eliminated (using the union operator on sets). If we
consider R rooks, we now have a complexity of $\mathcal{O}(4RN)$.

** Parallel algorithm
Now that we have a sequential algorithm for our new problem, it's easy
to convert it into a parallel one using Rayon.

#+Include: "src/board.rs" src rust :lines "265-297"

The code is identical to the sequential version, only that we
parallelize on the different rooks' positions. The 4 different
directions aren't considered in parallel anymore. With R rooks, we
have a work of $W = \mathcal{O}(4RN)$, and a depth of $D =
\mathcal{O}(4N)$. We can see now that it's much more scalable: with
the execution time being $max(\frac{W}{d}, D)$, the algorithm allows up to $p
= R$ processors to work in parallel.
* Benchmarking and analysis
In order to benchmark the results, I used the =criterion= crate, which
provides ways to benchmark and analyze the results of our
computations. The benchmarks compare four different versions: the
single rook, in parallel and sequential; and the multiple rooks, in
parallel and sequential. Those four algorithms are run on boards of
size 32 up to 288, by increments of 32. The parallel code was run with
4 threads, on a machine running Linux with Rust 1.48.0 with 4 physical
cores (8 virtual).

The boards are generated by filling half the squares with an equal
chance of a rook, a pawn or a bishop.

#+Caption: The four algorithms compared. The version with a single rook is too fast to be able to be compared with multiple rooks on large chessboards.
#+Attr_LaTeX: :width 1.4\linewidth
[[./img/lines.png]]

The speedup for the multiple rooks problem is extremely high when
using the parallel version, as the number of rooks to check increases
as the board increases itself: we can see here that as the number of
rooks increases, the sequential version increases accordingly, as it
needs to check in 4 directions for each additional rook, with
potentially more squares to go through each time; but with the
parallel version, the time of the computation increases in a much
slower way, as the rooks are checked in parallel.
